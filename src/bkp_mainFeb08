int main(int argc, char **argv) {
	ros::init(argc, argv, "image_listener");
	ros::NodeHandle nh;
//	cv::namedWindow("video_stream",cv::WINDOW_NORMAL);
//	cv::startWindowThread();

	//cv::namedWindow("matches", cv::WINDOW_NORMAL);
		//cv::startWindowThread();
	cv::namedWindow("good_matches", cv::WINDOW_NORMAL);
        cv::startWindowThread();



	//

     //Mat K1 = Mat(3,3, CV_32F, cvScalar(0.));
     K1.at<float>(0,0)=focal_length_x;
     K1.at<float>(0,1)=scew;
     K1.at<float>(0,2)=c_x;

     K1.at<float>(1,1)=focal_length_y;
     K1.at<float>(1,2)=c_y;

     K1.at<float>(2,2)=1;


    cv::namedWindow("handy_image",cv::WINDOW_NORMAL);
    cv::startWindowThread();

	//to check opencv version //compatibe with 2 not 3
//	//to check opencv version //compatibe with 2 not 3
	if (CV_MAJOR_VERSION < 3) {
		cout << "less than 3" << endl;
	} else {
		cout << "MORE than 3" << endl;
	}
//
////		cv::namedWindow("image1",cv::WINDOW_NORMAL);
////		cv::startWindowThread();
////		imshow("image1",image1);
//
////267
	image2 = imread("/usr/prakt/w041/video_seq_images2/frame0063.jpg",
			CV_LOAD_IMAGE_COLOR); // Read the file

	if (!image2.data)                             // Check for invalid input
	{
		cout << "Could not open or find the image2" << std::endl;
		return 0;
	}

	Mat image1=imread("/usr/prakt/w041/video_seq_images2/frame0079.jpg", CV_LOAD_IMAGE_COLOR) ;

	if (!image1.data)                             // Check for invalid input
	{
			 cout << "Could not open or find the image1" << std::endl;
                			return 0;
	}

	vector<float> distCoeff;// = [-0.525878 0.321315 0.000212 -0.000429 0.000000];
		// 1
/*		distCoeff.push_back(-0.525878);
		distCoeff.push_back(0.321315);
		distCoeff.push_back(0.000212);
		distCoeff.push_back(-0.000429);
		distCoeff.push_back(0.000000);
*/
		//2
		distCoeff.push_back(-0.521768);
		distCoeff.push_back(0.276146);
		distCoeff.push_back(-0.001513);
		distCoeff.push_back(0.000532);
		distCoeff.push_back(0.000000);


	 	focal_length_x = 575.426009;
	 	focal_length_y = 576.174707;
	 	c_x = 300.303245;
	 	c_y = 187.30014;
		scew = 0.0;

	
	K1.at<float>(0, 0) = focal_length_x;
	K1.at<float>(0, 1) = scew;
	K1.at<float>(0, 2) = c_x;

	K1.at<float>(1, 1) = focal_length_y;
	K1.at<float>(1, 2) = c_y;

	K1.at<float>(2, 2) = 1;

	Mat undistort_image1;
	undistort(image1,undistort_image1,K1,distCoeff);
	image1 = undistort_image1 ;

	Mat undistort_image2;
	undistort(image2, undistort_image2, K1, distCoeff);
	image2 = undistort_image2;
	calculate(image1);

//
//	//Size size(640, 360);                        //the dst image size,e.g.100x100
//	// resize(input, image1, size);                             //resize image
//
	cv::imshow("handy_image", image2);
//
//	cout << "going to subscibe" << endl;

	image_transport::ImageTransport it(nh);

	image_transport::Subscriber sub = it.subscribe("/ardrone/front/image_raw",	1, imageCallback);


	pub_com = nh.advertise<std_msgs::String>("tum_ardrone/com", 50);
	ros::Subscriber dronepose_sub = nh.subscribe("ardrone/predictedPose", 10,
			droneposeCb);
	ros::Subscriber sub1 = nh.subscribe("/my_topic", 1, keyboardCallback);

	//Mat validR = Mat::eye(3, 3, CV_32F);
	//validR = rpy2rod(30,30, 0);

	//Mat validT = (cv::Mat_<float>(3, 1) << -1, 0, 0);

  //cout << "Testing for validR::" << validR << "validT" << validT << endl ;

	//setConsideredPose();

//	ros::Duration d(1);
//	cout << "Bef" << endl ;
//	ros::spinOnce();
//	d.sleep();
//	ros::spinOnce();
//
//	cout << "Aft" << endl ;
	//transform_cordinates_and_send(validR, validT);

	ros::spin();

}
